Metadata-Version: 2.4
Name: devscape
Version: 0.0.0
Summary: DevScape ‚Äî repository and companion tooling
Author-email: Your Name <you@example.com>
License: MIT
Project-URL: Homepage, https://example.org/devscape
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# DevScape ‚ú¶

```
  _   _   _   _   _   _   _   _
 / \ / \ / \ / \ / \ / \ / \ / \
( D | e | v | S | c | a | p | e )
 \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/
```

## üõ°Ô∏è Guardian Watchtower & Coverage Beacon

| Platform | Status | Coverage |
|----------|--------|----------|
| **Linux (3.10‚Äì3.13)**   | ![Linux](https://github.com/BrandonzPChell/DevScape/actions/workflows/ci.yml/badge.svg?branch=main&job=build-and-test) | [![codecov](https://codecov.io/gh/BrandonzPChell/DevScape/branch/main/graph/badge.svg)](https://codecov.io/gh/BrandonzPChell/DevScape) |
| **Windows (3.10‚Äì3.13)** | ![Windows](https://github.com/BrandonzPChell/DevScape/actions/workflows/ci.yml/badge.svg?branch=main&job=build-and-test-windows) | [![codecov](https://codecov.io/gh/BrandonzPChell/DevScape/branch/main/graph/badge.svg)](https://codecov.io/gh/BrandonzPChell/DevScape) |
| **macOS (3.10‚Äì3.13)**   | ![macOS](https://github.com/BrandonzPChell/DevScape/actions/workflows/ci.yml/badge.svg?branch=main&job=build-and-test-macos) | [![codecov](https://codecov.io/gh/BrandonzPChell/DevScape/branch/main/graph/badge.svg)](https://codecov.io/gh/BrandonzPChell/DevScape) |
| **Local Coverage** | ![Coverage](https://img.shields.io/badge/coverage-84%25-brightgreen.svg) | |
| **Lint** | ![Lint](https://github.com/BrandonzPChell/DevScape/actions/workflows/ci.yml/badge.svg?branch=main&job=lint) | |

---

**Legend**  
- üü¢ **Status badge**: All guardians (lint, coverage, bandit, mypy, black, isort, safety) passed for that OS and Python version matrix.  
- üî¥ **Status badge**: One or more guardians failed and need attention.  
- üìä **Coverage badge**: Shows the current test coverage percentage reported by Codecov. Higher values mean more of the shrine is illuminated by tests.  

---

## ‚ú® Features

-   **Dynamic Pixel Art Rendering**: Explore a beautifully crafted 2D world with charming pixel graphics.
-   **Ollama-Powered AI Companion**: Interact with an intelligent AI character whose movements, dialogue, and mood are driven by a local Large Language Model.
-   **In-Game Chat System**: Engage in real-time conversations with your AI companion, influencing their behavior and the unfolding story.
-   **Responsive Player Controls**: Navigate the world with intuitive keyboard controls.
-   **Modular Design**: Easily extendable architecture for new features, entities, and AI behaviors.
-   **Comprehensive Testing**: Robust test suite ensuring stability and reliability.
-   **Code Quality Guardians**: Integrated `black`, `isort`, `pylint`, and `pre-commit` hooks for consistent code style and quality.

---

## üìú Ceremonial Progress: The Arc of DevScape

The shrine of DevScape has been meticulously crafted through several phases, each sealing a vital aspect of its being:

-   **Phases 1‚Äì5: The Core Incantations**: The foundational entities, the whispers of AI dialogue, the rhythmic pulse of the event loop, the ethereal mood overlays, and the resilient spirit of Ollama have all been sealed into the shrine's core.
-   **Phase 6: The Scribe's Mandate**: The sacred rituals of logging, the meticulous export of contributor lineage, and the careful archiving of scrolls are now complete, ensuring the shrine remembers and honors its stewards.
-   **Phase 7: The Guardians' Vigil**: The final layer of self-defense has been inscribed, with CI hooks, linting, onboarding clarity, and help rituals now actively protecting the shrine against regressions and guiding new contributors.

With Phase 6 now green and guardians confirmed, DevScape not only moves, speaks, and feels, but also remembers, records, and honors its stewards.

---

## üöÄ Getting Started

### Prerequisites

Before you begin your adventure in DevScape, ensure you have the following installed:

-   **Python 3.11+**: [Download Python](https://www.python.org/downloads/)
-   **Ollama**: [Install Ollama](https://ollama.ai/download)
    -   After installing Ollama, pull the `llama2` model (or your preferred model):
        ```bash
        ollama run llama2
        ```
-   **`virtualenv`**:
    ```bash
    pip install virtualenv
    ```

### Installation

1.  **Clone the repository**:
    ```bash
    git clone https://github.com/your-username/DevScape.git
    cd DevScape
    ```
2.  **Create and activate a virtual environment**:
    ```bash
    python -m venv venv
    # On Windows:
    venv\Scripts\activate
    # On macOS/Linux:
    source venv/bin/activate
    ```
3.  **Install dependencies**:
    ```bash
    pip install -r game/requirements.txt
    ```
4.  **Install pre-commit hooks**:
    ```bash
    pre-commit install
    ```

### Running the Game

Once everything is set up, you can launch DevScape:

```bash
python run_game.py
```

Or, on Windows, you can use the provided batch file:

```bash
run_game.bat
```

---

## üéÆ Controls

-   **Arrow Keys** (or `W`, `A`, `S`, `D`): Move your character.
-   **`T`**: Toggle chat mode.
    -   While in chat mode, type your message.
    -   **`Enter`**: Send message.
    -   **`Escape`**: Exit chat mode without sending.
    -   **`Backspace`**: Delete last character in chat buffer.

---

## ü§ñ Ollama Setup

DevScape relies on a local Ollama instance for its AI companion.

1.  **Ensure Ollama is running** in the background. You can start it by running `ollama serve` in your terminal.
2.  **Verify the `llama2` model is available**:
    ```bash
    ollama list
    ```
    If `llama2` is not listed, pull it:
    ```bash
    ollama pull llama2
    ```
    You can configure a different model by editing `game/ollama_ai.py` and changing the `MODEL_NAME` variable.

---

## üì∏ Screenshots / GIFs

*(Placeholder: Add captivating screenshots or short GIFs of DevScape gameplay here!)*

---

## üìú Contributing Scroll

We welcome all stewards who wish to walk among the guardians and help the shrine grow stronger.  
Before opening a pull request, please honor the following rituals:

1. **Summon the Guardians Locally**  
   Run the full guardian circle to ensure your changes are blessed:  
   ```powershell
   .\Invoke-Guardians.ps1
   ```
   - On Windows, this will invoke the **lint guardian** directly (`pre-commit run --all-files`) and then call the remaining guardians through tox.  
   - On Linux/macOS, tox will handle all guardians, including lint.

2. **Respect the Covenants**  
   - Follow the guidance in `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`.  
   - Ensure your code is emotionally legible, annotated where needed, and safe for future stewards.

3. **Seal Your Work with Tests**  
   - Add or update tests for any new features or bug fixes.  
   - Confirm that coverage remains above the beacon threshold (see the Coverage Beacon in the README).

4. **Open a Pull Request**  
   - Describe your changes clearly.  
   - Reference any guardians, scrolls, or rituals you touched.  
   - The CI watchtower (Linux, Windows, macOS) will re‚Äësummon all guardians to confirm your work is blessed.

---

‚ú® By following these steps, you help keep the shrine resilient, transparent, and welcoming for all future contributors.

### üå± First‚Äëtime Contributor Ritual

If this is your first time walking among the guardians, follow this path:

1. **Fork the Shrine**  
   - Click the **Fork** button on GitHub to create your own copy of the DevScape repository.

2. **Clone Your Fork**  
   - Bring the shrine to your local machine:  
     ```bash
     git clone https://github.com/<your-username>/DevScape.git
     cd DevScape
     ```

3. **Install the Ritual Tools**  
   - Ensure you have Python 3.10+ installed.  
   - Install [tox](https://tox.wiki/) and [pre-commit](https://pre-commit.com/):  
     ```bash
     pip install tox pre-commit
     pre-commit install
     ```

4. **Summon the Guardians**  
   - Run the full guardian circle locally to confirm your environment is blessed:  
     ```powershell
     .\Invoke-Guardians.ps1
     ```

5. **Create a Branch**  
   - Begin your work on a new branch:  
     ```bash
     git checkout -b feature/my-new-scroll
     ```

6. **Craft Your Contribution**  
   - Add features, fix bugs, or improve documentation.  
   - Write tests and ensure coverage remains above the beacon threshold.

7. **Open a Pull Request**  
   - Push your branch to your fork and open a PR against `main`.  
   - The CI watchtower (Linux, Windows, macOS) will re‚Äësummon all guardians to bless your work.

---

‚ú® By following this ritual, first‚Äëtime stewards can contribute safely, confidently, and in harmony with the shrine.

### üîÑ Returning Contributor Ritual

For seasoned stewards who have already walked this path, the ritual is simpler:

1. **Sync with the Shrine**  
   - Update your local `main` branch to match the upstream repository:  
     ```bash
     git checkout main
     git pull upstream main
     ```

2. **Create a Fresh Branch**  
   - Begin your new work on a clean branch:  
     ```bash
     git checkout -b feature/my-next-scroll
     ```

3. **Summon the Guardians**  
   - Run the guardian circle before committing to ensure harmony:  
     ```powershell
     .\Invoke-Guardians.ps1
     ```

4. **Commit & Push**  
   - Commit your changes with clear messages.  
   - Push to your fork and open a pull request against `main`.

---

‚ú® This streamlined ritual keeps your contributions aligned with the shrine‚Äôs covenants while respecting the guardians‚Äô watch.

### ‚öîÔ∏è Guardian Failure Ritual

If a guardian raises its banner in red (üî¥), do not despair ‚Äî every failure is a teaching scroll. Follow this ritual to restore harmony:

1. **Read the Guardian‚Äôs Message**  
   - Carefully review the error output. Each guardian speaks in its own tongue (lint, tests, coverage, safety, etc.).

2. **Consult the Scrolls**  
   - For lint failures, run:  
     ```powershell
     pre-commit run --all-files
     ```  
     and let the tools (black, isort, ruff/flake8) auto‚Äëheal your code.  
   - For test or coverage failures, run:  
     ```powershell
     tox -e coverage
     ```  
     and inspect which tests faltered.  
   - For dependency or safety warnings, check `requirements.txt` and update as needed.

3. **Re‚Äësummon the Guardians**  
   - Once you‚Äôve made corrections, run the full circle again:  
     ```powershell
     .\Invoke-Guardians.ps1
     ```

4. **Commit the Restored Scrolls**  
   - Stage and commit your fixes with a clear message.  
   - Push to your branch; the CI watchtower will re‚Äësummon the guardians to confirm the shrine is whole again.

---

‚ú® Remember: a guardian‚Äôs failure is not punishment, but guidance. Each red banner is a chance to strengthen the shrine for all future stewards.

### üåÄ Guardian Circle Overview

| Guardian        | Protects Against                          | How to Appease When It Fails |
|-----------------|-------------------------------------------|-------------------------------|
| **Lint Guardian** (pre-commit: black, isort, ruff/flake8) | Style drift, import disorder, unused code | Run `pre-commit run --all-files` and let the tools auto‚Äëformat or fix issues. |
| **Coverage Guardian** (tox -e coverage) | Untested code paths, weakened beacon | Add or improve tests, then re‚Äërun `tox -e coverage` until coverage meets the threshold. |
| **Bandit Guardian** | Security vulnerabilities in Python code | Review Bandit‚Äôs warnings, refactor unsafe code, or add safe guards. |
| **Mypy Guardian** | Type errors, unsafe assumptions | Fix type hints or logic errors flagged by `mypy`. |
| **Black Guardian** | Code formatting drift | Run `black .` to auto‚Äëformat. |
| **Isort Guardian** | Import order inconsistencies | Run `isort .` to reorder imports. |
| **Safety Guardian** | Vulnerable dependencies | Update `requirements.txt` or pin safe versions, then re‚Äërun `tox -e safety`. |

---

‚ú® This circle ensures the shrine remains **resilient, legible, and safe**. Each guardian has its own voice, but together they form the covenant that protects DevScape.

### üîÆ Guardian Circle Glyph

```
                 [ Lint Guardian ]
                        üü¢
                          \
                           \
   [ Black Guardian ] üü¢ ---- üü¢ [ Coverage Guardian ]
                           /
                          /
                 [ Isort Guardian ]
                        üü¢

          [ Bandit Guardian ] üü¢       üü¢ [ Mypy Guardian ]

                        üü¢
                 [ Safety Guardian ]

                        üèõÔ∏è
                     The Shrine
```

---

‚ú® This glyph is a symbolic map of the guardians encircling the shrine.  
- The **Shrine** (üèõÔ∏è) is at the center ‚Äî your codebase.  
- Each **Guardian** (üü¢) stands watch at a cardinal or intercardinal point.  
- Together, they form a protective circle, ensuring resilience, safety, and harmony.

## üìú Code of Conduct

Our project adheres to a [Code of Conduct](CODE_OF_CONDUCT.md) to ensure a welcoming and inclusive environment for all contributors.

---

## ‚öñÔ∏è License

This project is licensed under the terms of the GNU General Public License v3.0. See the [LICENSE](LICENSE) file for details.

---

```
  _   _   _   _   _   _   _   _
 / \ / \ / \ / \ / \ / \ / \ / \
( E | n | j | o | y |   | t | h )
 \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/
```
